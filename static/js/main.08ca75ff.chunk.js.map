{"version":3,"sources":["utils/Api.js","components/Header.js","utils/debounce.js","components/Item.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["api","options","this","url","baseUrl","fetch","method","then","res","ok","json","Promise","reject","Error","status","query","page","value","condition","keyword","uri","Header","props","React","useState","setValue","setCondition","inputValue","setInputValue","isFilterChanged","setFilterChanged","useEffect","filterData","setFilterData","getMore","updDB","data","length","setLastData","setDB","message","setAlert","catch","err","console","log","onChange","e","target","defaultValue","onInput","type","f","t","args","lastCall","Date","now","lastCallTimer","setTimeout","debounce","placeholder","Item","item","date","name","quantity","distance","Footer","App","isDataLoaded","setDataLoaded","isShowAlert","setShowAlert","lastData","db","offset","setOffset","pageNumber","setPageNumber","alert","timer","clearTimeout","getData","onScroll","window","pageYOffset","removeEventListener","addEventListener","passive","html","document","querySelector","offsetHeight","clientHeight","className","map","index","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.08ca75ff.chunk.js","sourcesContent":["export class Api {\r\n  constructor(options) {\r\n    this.url = options.baseUrl;\r\n  }\r\n\r\n  // **получение стартовой базы данных\r\n  getData() {\r\n    return fetch(`${this.url}/start`, {\r\n      method: \"GET\",\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      } else {\r\n        return Promise.reject(new Error(`Ошибка: ${res.status}`));\r\n      }\r\n    });\r\n  }\r\n\r\n  // **получение новых данных\r\n  getMore(query, page) {\r\n    const { value, condition, keyword } = query;\r\n    let uri = `${this.url}/more?value=${value}&condition=${condition}&keyword=${keyword}`;\r\n\r\n    if (page) {\r\n      uri += `&page=${page}`;\r\n    }\r\n    return fetch(uri, {\r\n      method: \"GET\",\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      } else {\r\n        return Promise.reject(new Error(`Ошибка: ${res.status}`));\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nconst api = new Api({\r\n  baseUrl: \"http://localhost:8080\",\r\n});\r\n\r\nexport default api;\r\n","// **импорты\r\nimport React from \"react\";\r\nimport api from \"../utils/Api\";\r\nimport { debounce } from \"../utils/debounce.js\";\r\n\r\n// **функционал\r\nfunction Header(props) {\r\n  const [value, setValue] = React.useState(\"none\");\r\n  const [condition, setCondition] = React.useState(\"includes\");\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n  const [isFilterChanged, setFilterChanged] = React.useState(false);\r\n\r\n  // *фильтруем данные\r\n  React.useEffect(() => {\r\n    const filterData = {\r\n      value,\r\n      condition,\r\n      keyword: inputValue || \"none\",\r\n    };\r\n    props.setFilterData(filterData);\r\n\r\n    if (isFilterChanged) {\r\n      api\r\n        .getMore(filterData)\r\n        .then((res) => {\r\n          const updDB = res.data;\r\n\r\n          if (res.data.length < 50) {\r\n            props.setLastData(true);\r\n          } else {\r\n            props.setLastData(false);\r\n          }\r\n          props.setDB(updDB);\r\n\r\n          if (res.message) {\r\n            props.setAlert(res.message);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n    setFilterChanged(false);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isFilterChanged]);\r\n\r\n  // *отслеживаем селект поля\r\n  function valueHandler(e) {\r\n    setValue(e.target.value);\r\n    setFilterChanged(true);\r\n  }\r\n\r\n  // *отслеживаем введенный текст\r\n  function inputHandler(e) {\r\n    setInputValue(e.target.value);\r\n    debounce(setFilterChanged, 1000, true);\r\n  }\r\n\r\n  // *отслеживаем селект значения\r\n  function conditionHandler(e) {\r\n    setCondition(e.target.value);\r\n    setFilterChanged(true);\r\n  }\r\n\r\n  // **DOM\r\n  return (\r\n    <header>\r\n      <select onChange={valueHandler} defaultValue=\"none\">\r\n        <option value=\"none\">Выберите поле</option>\r\n        <option value=\"name\">Название</option>\r\n        <option value=\"quantity\">Количество</option>\r\n        <option value=\"distance\">Расстояние</option>\r\n      </select>\r\n      <select onInput={conditionHandler} defaultValue=\"includes\">\r\n        <option value=\"includes\">Содержит</option>\r\n        <option value=\"equals\">Равно</option>\r\n        <option value=\"larger\">Больше</option>\r\n        <option value=\"less\">Меньше</option>\r\n      </select>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={inputHandler}\r\n        placeholder=\"Введите искомый текст\"\r\n      />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","export function debounce(f, t, args) {\r\n  let lastCall = Date.now();\r\n  let lastCallTimer = setTimeout(() => f(args), t);\r\n  return function () {\r\n    const previousCall = lastCall;\r\n    lastCall = Date.now();\r\n\r\n    if (previousCall && lastCall - previousCall <= t) {\r\n      clearTimeout(lastCallTimer);\r\n    }\r\n    lastCallTimer = setTimeout(() => f(args), t);\r\n  };\r\n}\r\n","import React from 'react';\r\n\r\nfunction Item(props) {\r\n  return (\r\n    <tr>\r\n      <td>{props.item.date}</td>\r\n      <td>{props.item.name}</td>\r\n      <td>{props.item.quantity}</td>\r\n      <td>{props.item.distance}</td>\r\n    </tr>\r\n  );\r\n}\r\n  \r\nexport default Item;","import React from 'react';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer >\r\n      <p>&copy; 2022 Алексей Акулич</p>\r\n    </footer>\r\n  );\r\n}\r\n  \r\nexport default Footer;","/* eslint-disable array-callback-return */\r\n// **импорты\r\nimport React from \"react\";\r\nimport Header from \"./Header\";\r\nimport Item from \"./Item\";\r\nimport Footer from \"./Footer\";\r\nimport api from \"../utils/Api\";\r\n\r\nfunction App() {\r\n  // **стейты\r\n  const [isDataLoaded, setDataLoaded] = React.useState(false);\r\n  const [isShowAlert, setShowAlert] = React.useState(false);\r\n  const [lastData, setLastData] = React.useState(false);\r\n  const [db, setDB] = React.useState([]);\r\n  const [offset, setOffset] = React.useState(0);\r\n  const [pageNumber, setPageNumber] = React.useState(1);\r\n  const [alert, setAlert] = React.useState(\"\");\r\n  const [filterData, setFilterData] = React.useState({\r\n    value: \"none\",\r\n    condition: \"includes\",\r\n    keyword: \"none\",\r\n  });\r\n\r\n  // **функционал\r\n  // * получаем дефолтные данные\r\n  React.useEffect(() => {\r\n    if (alert !== \"\") {\r\n      setShowAlert(true);\r\n      const timer = setTimeout(() => {\r\n        setShowAlert(false);\r\n        setAlert(\"\");\r\n      }, 1500);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [alert]);\r\n\r\n  // *получаем дефолтные данные\r\n  React.useEffect(() => {\r\n    api\r\n      .getData()\r\n      .then((res) => {\r\n        setDB(res.data);\r\n\r\n        if (res.data.length < 50) {\r\n          setLastData(true);\r\n        } else {\r\n          setLastData(false);\r\n        }\r\n        setDataLoaded(true);\r\n\r\n        if (res.message) {\r\n          setAlert(res.message);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  // *отслеживаем прокрутку страницы\r\n  React.useEffect(() => {\r\n    const onScroll = () => setOffset(window.pageYOffset);\r\n    window.removeEventListener(\"scroll\", onScroll);\r\n    window.addEventListener(\"scroll\", onScroll, { passive: true });\r\n    return () => window.removeEventListener(\"scroll\", onScroll);\r\n  }, []);\r\n\r\n  // *пагинация по скроллу\r\n  React.useEffect(() => {\r\n    const html = document.querySelector(\"html\");\r\n\r\n    if (!lastData && offset > html.offsetHeight - html.clientHeight - 1) {\r\n      const nextPage = pageNumber + 1;\r\n      setPageNumber(nextPage);\r\n      api\r\n        .getMore(filterData, pageNumber)\r\n        .then((res) => {\r\n          if (res.data.length < 50) {\r\n            setLastData(true);\r\n          } else {\r\n            setLastData(false);\r\n          }\r\n          const updDB = [...db, ...res.data];\r\n          setDB(updDB);\r\n\r\n          if (res.message) {\r\n            setAlert(res.message);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [offset]);\r\n\r\n  // **DOM\r\n  return (\r\n    <section className=\"page\">\r\n      {isDataLoaded ? (\r\n        <>\r\n          <Header\r\n            filterData={filterData}\r\n            setFilterData={setFilterData}\r\n            setDB={setDB}\r\n            setAlert={setAlert}\r\n            setLastData={setLastData}\r\n          />\r\n          <main>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Дата</th>\r\n                  <th>Название</th>\r\n                  <th>Количество</th>\r\n                  <th>Расстояние</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {db.map((item, index) => {\r\n                  if (item.date) {\r\n                    return <Item key={index} item={item} />;\r\n                  }\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </main>\r\n        </>\r\n      ) : (\r\n        <section className=\"page\"><h2>Нет связи с сервером. Убедитесь, что он запущен и обновите страницу</h2></section>\r\n      )}\r\n      {!lastData ? (\r\n        <section className=\"Preloader\">\r\n          <figure className=\"Preloader__rotator\"></figure>\r\n        </section>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Footer />\r\n      <article className={`${isShowAlert && \"showArticle\"}`}>\r\n        <h2>{alert}</h2>\r\n      </article>\r\n    </section>\r\n  );\r\n}\r\n\r\n// **экспорт\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}